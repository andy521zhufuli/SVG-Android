package com.github.megatronking.svg.iconlibs;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_replay_10 extends SVGRenderer {

    public ic_replay_10(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(24.0f);
        mHeight = dip2px(24.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        final float scaleX = w / 24.0f;
        final float scaleY = h / 24.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(12.0f, 5.0f);
        mPath.lineTo(12.0f, 1.0f);
        mPath.lineTo(7.0f, 6.0f);
        mPath.rLineTo(5.0f, 5.0f);
        mPath.lineTo(12.0f, 7.0f);
        mPath.rCubicTo(3.3f, 0.0f, 6.0f, 2.7f, 6.0f, 6.0f);
        mPath.rCubicTo(0.0f, 3.3000002f, -2.7f, 6.0f, -6.0f, 6.0f);
        mPath.rCubicTo(-3.3000002f, 0.0f, -6.0f, -2.7f, -6.0f, -6.0f);
        mPath.lineTo(4.0f, 13.0f);
        mPath.rCubicTo(0.0f, 4.4f, 3.6f, 8.0f, 8.0f, 8.0f);
        mPath.rCubicTo(4.4f, 0.0f, 8.0f, -3.6f, 8.0f, -8.0f);
        mPath.rCubicTo(0.0f, -4.3999996f, -3.6f, -8.0f, -8.0f, -8.0f);
        mPath.close();
        mPath.moveTo(12.0f, 5.0f);
        mPath.rMoveTo(-1.1f, 11.0f);
        mPath.lineTo(10.0f, 16.0f);
        mPath.rLineTo(0f, -3.3f);
        mPath.lineTo(9.0f, 13.0f);
        mPath.rLineTo(0f, -0.7f);
        mPath.rLineTo(1.8f, -0.6f);
        mPath.rLineTo(0.1f, 0f);
        mPath.lineTo(10.900001f, 16.0f);
        mPath.close();
        mPath.moveTo(10.9f, 16.0f);
        mPath.rMoveTo(4.3f, -1.8f);
        mPath.rCubicTo(0.0f, 0.3f, 0.0f, 0.6f, -0.1f, 0.8f);
        mPath.rLineTo(-0.3f, 0.6f);
        mPath.rCubicTo(0.0f, 0.0f, -0.3f, 0.3f, -0.5f, 0.3f);
        mPath.rCubicTo(-0.19999981f, 0.0f, -0.4f, 0.1f, -0.6f, 0.1f);
        mPath.rCubicTo(-0.20000076f, 0.0f, -0.4f, 0.0f, -0.6f, -0.1f);
        mPath.rCubicTo(-0.20000076f, -0.10000038f, -0.3f, -0.2f, -0.5f, -0.3f);
        mPath.rCubicTo(-0.19999981f, -0.10000038f, -0.2f, -0.3f, -0.3f, -0.6f);
        mPath.rCubicTo(-0.10000038f, -0.3000002f, -0.1f, -0.5f, -0.1f, -0.8f);
        mPath.rLineTo(0f, -0.7f);
        mPath.rCubicTo(0.0f, -0.3f, 0.0f, -0.6f, 0.1f, -0.8f);
        mPath.rLineTo(0.3f, -0.6f);
        mPath.rCubicTo(0.0f, 0.0f, 0.3f, -0.3f, 0.5f, -0.3f);
        mPath.rCubicTo(0.19999981f, 0.0f, 0.4f, -0.1f, 0.6f, -0.1f);
        mPath.rCubicTo(0.20000076f, 0.0f, 0.4f, 0.0f, 0.6f, 0.1f);
        mPath.rCubicTo(0.2f, 0.1f, 0.3f, 0.2f, 0.5f, 0.3f);
        mPath.rCubicTo(0.19999981f, 0.10000038f, 0.2f, 0.3f, 0.3f, 0.6f);
        mPath.rCubicTo(0.10000038f, 0.3000002f, 0.1f, 0.5f, 0.1f, 0.8f);
        mPath.rLineTo(0f, 0.7f);
        mPath.close();
        mPath.moveTo(15.2f, 14.2f);
        mPath.rMoveTo(-0.9f, -0.8f);
        mPath.rLineTo(0f, -0.5f);
        mPath.rCubicTo(0.0f, 0.0f, -0.1f, -0.2f, -0.1f, -0.3f);
        mPath.rCubicTo(0.0f, -0.10000038f, -0.1f, -0.1f, -0.2f, -0.2f);
        mPath.rCubicTo(-0.09999943f, -0.09999943f, -0.2f, -0.1f, -0.3f, -0.1f);
        mPath.rCubicTo(-0.10000038f, 0.0f, -0.2f, 0.0f, -0.3f, 0.1f);
        mPath.rLineTo(-0.2f, 0.2f);
        mPath.rCubicTo(0.0f, 0.0f, -0.1f, 0.2f, -0.1f, 0.3f);
        mPath.rLineTo(0f, 2.0f);
        mPath.rCubicTo(0.0f, 0.0f, 0.1f, 0.2f, 0.1f, 0.3f);
        mPath.rCubicTo(0.0f, 0.10000038f, 0.1f, 0.1f, 0.2f, 0.2f);
        mPath.rCubicTo(0.09999943f, 0.09999943f, 0.2f, 0.1f, 0.3f, 0.1f);
        mPath.rCubicTo(0.10000038f, 0.0f, 0.2f, 0.0f, 0.3f, -0.1f);
        mPath.rLineTo(0.2f, -0.2f);
        mPath.rCubicTo(0.0f, 0.0f, 0.1f, -0.2f, 0.1f, -0.3f);
        mPath.rLineTo(0f, -1.5f);
        mPath.close();
        mPath.moveTo(14.3f, 13.4f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}