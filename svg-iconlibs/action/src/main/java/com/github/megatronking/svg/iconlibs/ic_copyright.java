package com.github.megatronking.svg.iconlibs;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_copyright extends SVGRenderer {

    public ic_copyright(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(24.0f);
        mHeight = dip2px(24.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        final float scaleX = w / 24.0f;
        final float scaleY = h / 24.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(10.08f, 10.86f);
        mPath.rCubicTo(0.05f, -0.33f, 0.16f, -0.62f, 0.3f, -0.87f);
        mPath.rCubicTo(0.14000034f, -0.25f, 0.34f, -0.46f, 0.59f, -0.62f);
        mPath.rCubicTo(0.24f, -0.15f, 0.54f, -0.22f, 0.91f, -0.23f);
        mPath.rCubicTo(0.23f, 0.01f, 0.44f, 0.05f, 0.63f, 0.13f);
        mPath.rCubicTo(0.2f, 0.09f, 0.38f, 0.21f, 0.52f, 0.36f);
        mPath.rCubicTo(0.14000034f, 0.14999962f, 0.25f, 0.33f, 0.34f, 0.53f);
        mPath.rCubicTo(0.09000015f, 0.19999981f, 0.13f, 0.42f, 0.14f, 0.64f);
        mPath.rLineTo(1.79f, 0f);
        mPath.rCubicTo(-0.02f, -0.47f, -0.11f, -0.9f, -0.28f, -1.29f);
        mPath.rCubicTo(-0.17000008f, -0.39000034f, -0.4f, -0.73f, -0.7f, -1.01f);
        mPath.rCubicTo(-0.3000002f, -0.2800007f, -0.66f, -0.5f, -1.08f, -0.66f);
        mPath.rCubicTo(-0.42000008f, -0.15999985f, -0.88f, -0.23f, -1.39f, -0.23f);
        mPath.rCubicTo(-0.65f, 0.0f, -1.22f, 0.11f, -1.7f, 0.34f);
        mPath.rCubicTo(-0.47999954f, 0.23000002f, -0.88f, 0.53f, -1.2f, 0.92f);
        mPath.rCubicTo(-0.3199997f, 0.3899994f, -0.56f, 0.84f, -0.71f, 1.36f);
        mPath.cubicTo(8.090002f, 10.749999f, 8.0f, 11.29f, 8.0f, 11.87f);
        mPath.rLineTo(0f, 0.27f);
        mPath.rCubicTo(0.0f, 0.58f, 0.08f, 1.12f, 0.23f, 1.64f);
        mPath.rCubicTo(0.14999962f, 0.52000046f, 0.39f, 0.97f, 0.71f, 1.35f);
        mPath.rCubicTo(0.3199997f, 0.3800001f, 0.72f, 0.69f, 1.2f, 0.91f);
        mPath.rCubicTo(0.47999954f, 0.22000027f, 1.05f, 0.34f, 1.7f, 0.34f);
        mPath.rCubicTo(0.47f, 0.0f, 0.91f, -0.08f, 1.32f, -0.23f);
        mPath.rCubicTo(0.40999985f, -0.14999962f, 0.77f, -0.36f, 1.08f, -0.63f);
        mPath.rCubicTo(0.31000042f, -0.27000046f, 0.56f, -0.58f, 0.74f, -0.94f);
        mPath.rCubicTo(0.17999935f, -0.35999966f, 0.29f, -0.74f, 0.3f, -1.15f);
        mPath.rLineTo(-1.79f, 0f);
        mPath.rCubicTo(-0.01f, 0.21f, -0.06f, 0.4f, -0.15f, 0.58f);
        mPath.rCubicTo(-0.0899992f, 0.1800003f, -0.21f, 0.33f, -0.36f, 0.46f);
        mPath.rCubicTo(-0.14999962f, 0.13000011f, -0.32f, 0.23f, -0.52f, 0.3f);
        mPath.rCubicTo(-0.19f, 0.07f, -0.39f, 0.09f, -0.6f, 0.1f);
        mPath.rCubicTo(-0.36f, -0.01f, -0.66f, -0.08f, -0.89f, -0.23f);
        mPath.rCubicTo(-0.25f, -0.16f, -0.45f, -0.37f, -0.59f, -0.62f);
        mPath.rCubicTo(-0.14000034f, -0.25f, -0.25f, -0.55f, -0.3f, -0.88f);
        mPath.rCubicTo(-0.05000019f, -0.32999992f, -0.08f, -0.67f, -0.08f, -1.0f);
        mPath.rLineTo(0f, -0.27f);
        mPath.rCubicTo(0.0f, -0.35f, 0.03f, -0.68f, 0.08f, -1.01f);
        mPath.close();
        mPath.moveTo(10.08f, 10.86f);
        mPath.moveTo(12.0f, 2.0f);
        mPath.cubicTo(6.48f, 2.0f, 2.0f, 6.48f, 2.0f, 12.0f);
        mPath.rCubicTo(0.0f, 5.52f, 4.48f, 10.0f, 10.0f, 10.0f);
        mPath.rCubicTo(5.52f, 0.0f, 10.0f, -4.48f, 10.0f, -10.0f);
        mPath.cubicTo(22.0f, 6.4799995f, 17.52f, 2.0f, 12.0f, 2.0f);
        mPath.close();
        mPath.moveTo(12.0f, 2.0f);
        mPath.rMoveTo(0.0f, 18.0f);
        mPath.rCubicTo(-4.41f, 0.0f, -8.0f, -3.59f, -8.0f, -8.0f);
        mPath.rCubicTo(0.0f, -4.41f, 3.59f, -8.0f, 8.0f, -8.0f);
        mPath.rCubicTo(4.41f, 0.0f, 8.0f, 3.59f, 8.0f, 8.0f);
        mPath.rCubicTo(0.0f, 4.41f, -3.59f, 8.0f, -8.0f, 8.0f);
        mPath.close();
        mPath.moveTo(12.0f, 20.0f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}