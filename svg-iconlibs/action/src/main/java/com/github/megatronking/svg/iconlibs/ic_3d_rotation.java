package com.github.megatronking.svg.iconlibs;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_3d_rotation extends SVGRenderer {

    public ic_3d_rotation(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(24.0f);
        mHeight = dip2px(24.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        final float scaleX = w / 24.0f;
        final float scaleY = h / 24.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(7.52f, 21.48f);
        mPath.cubicTo(4.25f, 19.94f, 1.91f, 16.76f, 1.55f, 13.0f);
        mPath.lineTo(0.05f, 13.0f);
        mPath.cubicTo(0.56f, 19.16f, 5.71f, 24.0f, 12.0f, 24.0f);
        mPath.rLineTo(0.66f, -0.03f);
        mPath.rLineTo(-3.81f, -3.81f);
        mPath.rLineTo(-1.33f, 1.32f);
        mPath.close();
        mPath.moveTo(7.52f, 21.48f);
        mPath.rMoveTo(0.89f, -6.52f);
        mPath.rCubicTo(-0.19f, 0.0f, -0.37f, -0.03f, -0.52f, -0.08f);
        mPath.rCubicTo(-0.16f, -0.06f, -0.29f, -0.13f, -0.4f, -0.24f);
        mPath.rCubicTo(-0.11f, -0.1f, -0.2f, -0.22f, -0.26f, -0.37f);
        mPath.rCubicTo(-0.06f, -0.14f, -0.09f, -0.3f, -0.09f, -0.47f);
        mPath.rLineTo(-1.3f, 0f);
        mPath.rCubicTo(0.0f, 0.36f, 0.07f, 0.68f, 0.21f, 0.95f);
        mPath.rCubicTo(0.14f, 0.27f, 0.33f, 0.5f, 0.56f, 0.69f);
        mPath.rCubicTo(0.24f, 0.18f, 0.51f, 0.32f, 0.82f, 0.41f);
        mPath.rCubicTo(0.3f, 0.1f, 0.62f, 0.15f, 0.96f, 0.15f);
        mPath.rCubicTo(0.37f, 0.0f, 0.72f, -0.05f, 1.03f, -0.15f);
        mPath.rCubicTo(0.32f, -0.1f, 0.6f, -0.25f, 0.83f, -0.44f);
        mPath.rCubicTo(0.22999954f, -0.18999958f, 0.42f, -0.43f, 0.55f, -0.72f);
        mPath.rCubicTo(0.13f, -0.29f, 0.2f, -0.61f, 0.2f, -0.97f);
        mPath.rCubicTo(0.0f, -0.19f, -0.02f, -0.38f, -0.07f, -0.56f);
        mPath.rCubicTo(-0.05f, -0.18f, -0.12f, -0.35f, -0.23f, -0.51f);
        mPath.rCubicTo(-0.1f, -0.16f, -0.24f, -0.3f, -0.4f, -0.43f);
        mPath.rCubicTo(-0.17f, -0.13f, -0.37f, -0.23f, -0.61f, -0.31f);
        mPath.rCubicTo(0.2f, -0.09f, 0.37f, -0.2f, 0.52f, -0.33f);
        mPath.rCubicTo(0.15f, -0.13f, 0.27f, -0.27f, 0.37f, -0.42f);
        mPath.rCubicTo(0.1f, -0.15f, 0.17f, -0.3f, 0.22f, -0.46f);
        mPath.rCubicTo(0.05f, -0.16f, 0.07f, -0.32f, 0.07f, -0.48f);
        mPath.rCubicTo(0.0f, -0.36f, -0.06f, -0.68f, -0.18f, -0.96f);
        mPath.rCubicTo(-0.12f, -0.28f, -0.29f, -0.51f, -0.51f, -0.69f);
        mPath.rCubicTo(-0.2f, -0.19f, -0.47f, -0.33f, -0.77f, -0.43f);
        mPath.cubicTo(9.1f, 8.05f, 8.76f, 8.0f, 8.39f, 8.0f);
        mPath.rCubicTo(-0.36f, 0.0f, -0.69f, 0.05f, -1.0f, 0.16f);
        mPath.rCubicTo(-0.3f, 0.11f, -0.57f, 0.26f, -0.79f, 0.45f);
        mPath.rCubicTo(-0.21f, 0.19f, -0.38f, 0.41f, -0.51f, 0.67f);
        mPath.rCubicTo(-0.12f, 0.26f, -0.18f, 0.54f, -0.18f, 0.85f);
        mPath.rLineTo(1.3f, 0f);
        mPath.rCubicTo(0.0f, -0.17f, 0.03f, -0.32f, 0.09f, -0.45f);
        mPath.rCubicTo(0.059999943f, -0.13000011f, 0.14f, -0.25f, 0.25f, -0.34f);
        mPath.rCubicTo(0.11f, -0.09f, 0.23f, -0.17f, 0.38f, -0.22f);
        mPath.rCubicTo(0.15f, -0.05f, 0.3f, -0.08f, 0.48f, -0.08f);
        mPath.rCubicTo(0.4f, 0.0f, 0.7f, 0.1f, 0.89f, 0.31f);
        mPath.rCubicTo(0.19f, 0.2f, 0.29f, 0.49f, 0.29f, 0.86f);
        mPath.rCubicTo(0.0f, 0.18f, -0.03f, 0.34f, -0.08f, 0.49f);
        mPath.rCubicTo(-0.05f, 0.15f, -0.14f, 0.27f, -0.25f, 0.37f);
        mPath.rCubicTo(-0.11f, 0.1f, -0.25f, 0.18f, -0.41f, 0.24f);
        mPath.rCubicTo(-0.16f, 0.06f, -0.36f, 0.09f, -0.58f, 0.09f);
        mPath.lineTo(7.5f, 11.4f);
        mPath.rLineTo(0f, 1.03f);
        mPath.rLineTo(0.77f, 0f);
        mPath.rCubicTo(0.22f, 0.0f, 0.42f, 0.02f, 0.6f, 0.07f);
        mPath.rCubicTo(0.1800003f, 0.049999237f, 0.33f, 0.13f, 0.45f, 0.23f);
        mPath.rCubicTo(0.12f, 0.11f, 0.22f, 0.24f, 0.29f, 0.4f);
        mPath.rCubicTo(0.07f, 0.16f, 0.1f, 0.35f, 0.1f, 0.57f);
        mPath.rCubicTo(0.0f, 0.41f, -0.12f, 0.72f, -0.35f, 0.93f);
        mPath.rCubicTo(-0.23f, 0.23f, -0.55f, 0.33f, -0.95f, 0.33f);
        mPath.close();
        mPath.moveTo(8.41f, 14.959999f);
        mPath.rMoveTo(8.55f, -5.92f);
        mPath.rCubicTo(-0.32f, -0.33f, -0.7f, -0.59f, -1.14f, -0.77f);
        mPath.rCubicTo(-0.43f, -0.18f, -0.92f, -0.27f, -1.46f, -0.27f);
        mPath.lineTo(12.0f, 7.9999986f);
        mPath.rLineTo(0f, 8.0f);
        mPath.rLineTo(2.3f, 0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.06f, -0.09f, 1.51f, -0.27f);
        mPath.rCubicTo(0.45f, -0.18f, 0.84f, -0.43f, 1.16f, -0.76f);
        mPath.rCubicTo(0.32f, -0.33f, 0.57f, -0.73f, 0.74f, -1.19f);
        mPath.rCubicTo(0.17f, -0.47f, 0.26f, -0.99f, 0.26f, -1.57f);
        mPath.rLineTo(0f, -0.4f);
        mPath.rCubicTo(0.0f, -0.58f, -0.09f, -1.1f, -0.26f, -1.57f);
        mPath.rCubicTo(-0.18f, -0.47f, -0.43f, -0.87f, -0.75f, -1.2f);
        mPath.close();
        mPath.moveTo(16.96f, 9.039999f);
        mPath.rMoveTo(-0.39f, 3.16f);
        mPath.rCubicTo(0.0f, 0.42f, -0.05f, 0.79f, -0.14f, 1.13f);
        mPath.rCubicTo(-0.1f, 0.33f, -0.24f, 0.62f, -0.43f, 0.85f);
        mPath.rCubicTo(-0.19f, 0.23f, -0.43f, 0.41f, -0.71f, 0.53f);
        mPath.rCubicTo(-0.29f, 0.12f, -0.62f, 0.18f, -0.99f, 0.18f);
        mPath.rLineTo(-0.91f, 0f);
        mPath.lineTo(13.39f, 9.12f);
        mPath.rLineTo(0.97f, 0f);
        mPath.rCubicTo(0.72f, 0.0f, 1.27f, 0.23f, 1.64f, 0.69f);
        mPath.rCubicTo(0.38f, 0.46f, 0.57f, 1.12f, 0.57f, 1.99f);
        mPath.rLineTo(0f, 0.4f);
        mPath.close();
        mPath.moveTo(16.57f, 12.199999f);
        mPath.moveTo(12.0f, 0.0f);
        mPath.rLineTo(-0.66f, 0.03f);
        mPath.rLineTo(3.81f, 3.81f);
        mPath.rLineTo(1.33f, -1.33f);
        mPath.rCubicTo(3.27f, 1.55f, 5.61f, 4.72f, 5.96f, 8.48f);
        mPath.rLineTo(1.5f, 0f);
        mPath.cubicTo(23.44f, 4.84f, 18.29f, 0.0f, 12.0f, 0.0f);
        mPath.close();
        mPath.moveTo(12.0f, 0.0f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}