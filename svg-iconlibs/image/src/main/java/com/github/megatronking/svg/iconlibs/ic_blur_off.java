package com.github.megatronking.svg.iconlibs;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_blur_off extends SVGRenderer {

    public ic_blur_off(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(24.0f);
        mHeight = dip2px(24.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        final float scaleX = w / 24.0f;
        final float scaleY = h / 24.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(14.0f, 7.0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.rCubicTo(-0.5500002f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.close();
        mPath.moveTo(14.0f, 7.0f);
        mPath.rMoveTo(-0.2f, 4.48f);
        mPath.rLineTo(0.2f, 0.02f);
        mPath.rCubicTo(0.83f, 0.0f, 1.5f, -0.67f, 1.5f, -1.5f);
        mPath.rCubicTo(0.0f, -0.8299999f, -0.67f, -1.5f, -1.5f, -1.5f);
        mPath.rCubicTo(-0.8299999f, 0.0f, -1.5f, 0.67f, -1.5f, 1.5f);
        mPath.rLineTo(0.02f, 0.2f);
        mPath.rCubicTo(0.09f, 0.67f, 0.61f, 1.19f, 1.28f, 1.28f);
        mPath.close();
        mPath.moveTo(13.8f, 11.48f);
        mPath.moveTo(14.0f, 3.5f);
        mPath.rCubicTo(0.28f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999997f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.rCubicTo(-0.27999973f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999997f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.close();
        mPath.moveTo(14.0f, 3.5f);
        mPath.rMoveTo(-4.0f, 0.0f);
        mPath.rCubicTo(0.28f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999997f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.rCubicTo(-0.27999973f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999997f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.close();
        mPath.moveTo(10.0f, 3.5f);
        mPath.rMoveTo(11.0f, 7.0f);
        mPath.rCubicTo(0.28f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999973f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.rCubicTo(-0.2800007f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999973f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.close();
        mPath.moveTo(21.0f, 10.5f);
        mPath.moveTo(10.0f, 7.0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.rCubicTo(-0.5500002f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.close();
        mPath.moveTo(10.0f, 7.0f);
        mPath.rMoveTo(8.0f, 8.0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.rCubicTo(-0.54999924f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.close();
        mPath.moveTo(18.0f, 15.0f);
        mPath.rMoveTo(0.0f, -4.0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.rCubicTo(-0.54999924f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.close();
        mPath.moveTo(18.0f, 11.0f);
        mPath.rMoveTo(0.0f, -4.0f);
        mPath.rCubicTo(0.55f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.rCubicTo(-0.54999924f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.close();
        mPath.moveTo(18.0f, 7.0f);
        mPath.rMoveTo(-4.0f, 13.5f);
        mPath.rCubicTo(-0.28f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.2800007f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.rCubicTo(0.27999973f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.2800007f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.close();
        mPath.moveTo(14.0f, 20.5f);
        mPath.moveTo(2.5f, 5.27f);
        mPath.rLineTo(3.78f, 3.78f);
        mPath.lineTo(6.0f, 9.0f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.rCubicTo(0.5500002f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.1f, -0.03f, -0.19f, -0.06f, -0.28f);
        mPath.rLineTo(2.81f, 2.81f);
        mPath.rCubicTo(-0.71f, 0.11f, -1.25f, 0.73f, -1.25f, 1.47f);
        mPath.rCubicTo(0.0f, 0.83f, 0.67f, 1.5f, 1.5f, 1.5f);
        mPath.rCubicTo(0.74f, 0.0f, 1.36f, -0.54f, 1.47f, -1.25f);
        mPath.rLineTo(2.81f, 2.81f);
        mPath.rCubicTo(-0.09f, -0.03f, -0.18f, -0.06f, -0.28f, -0.06f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.54999924f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.rCubicTo(0.5500002f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.1f, -0.03f, -0.19f, -0.06f, -0.28f);
        mPath.rLineTo(3.78f, 3.78f);
        mPath.lineTo(20.0f, 20.23f);
        mPath.lineTo(3.77f, 4.0f);
        mPath.lineTo(2.5f, 5.27f);
        mPath.close();
        mPath.moveTo(2.5f, 5.27f);
        mPath.moveTo(10.0f, 17.0f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.54999924f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.rCubicTo(0.5500002f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.54999924f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.close();
        mPath.moveTo(10.0f, 17.0f);
        mPath.rMoveTo(11.0f, -3.5f);
        mPath.rCubicTo(-0.28f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999973f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.rCubicTo(0.2800007f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999973f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.close();
        mPath.moveTo(21.0f, 13.5f);
        mPath.moveTo(6.0f, 13.0f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.5500002f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.rCubicTo(0.5500002f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.5500002f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.close();
        mPath.moveTo(6.0f, 13.0f);
        mPath.moveTo(3.0f, 9.5f);
        mPath.rCubicTo(-0.28f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999973f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.rCubicTo(0.27999997f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999973f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.close();
        mPath.moveTo(3.0f, 9.5f);
        mPath.rMoveTo(7.0f, 11.0f);
        mPath.rCubicTo(-0.28f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.2800007f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.rCubicTo(0.27999973f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.2800007f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.close();
        mPath.moveTo(10.0f, 20.5f);
        mPath.moveTo(6.0f, 17.0f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.0f, 0.45f, -1.0f, 1.0f);
        mPath.rCubicTo(0.0f, 0.54999924f, 0.45f, 1.0f, 1.0f, 1.0f);
        mPath.rCubicTo(0.5500002f, 0.0f, 1.0f, -0.45f, 1.0f, -1.0f);
        mPath.rCubicTo(0.0f, -0.54999924f, -0.45f, -1.0f, -1.0f, -1.0f);
        mPath.close();
        mPath.moveTo(6.0f, 17.0f);
        mPath.rMoveTo(-3.0f, -3.5f);
        mPath.rCubicTo(-0.28f, 0.0f, -0.5f, 0.22f, -0.5f, 0.5f);
        mPath.rCubicTo(0.0f, 0.27999973f, 0.22f, 0.5f, 0.5f, 0.5f);
        mPath.rCubicTo(0.27999997f, 0.0f, 0.5f, -0.22f, 0.5f, -0.5f);
        mPath.rCubicTo(0.0f, -0.27999973f, -0.22f, -0.5f, -0.5f, -0.5f);
        mPath.close();
        mPath.moveTo(3.0f, 13.5f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}