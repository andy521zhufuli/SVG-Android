package com.github.megatronking.svg.iconlibs;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_timer_3 extends SVGRenderer {

    public ic_timer_3(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(24.0f);
        mHeight = dip2px(24.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        final float scaleX = w / 24.0f;
        final float scaleY = h / 24.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(11.61f, 12.97f);
        mPath.rCubicTo(-0.16f, -0.24f, -0.36f, -0.46f, -0.62f, -0.65f);
        mPath.rCubicTo(-0.25f, -0.19f, -0.56f, -0.35f, -0.93f, -0.48f);
        mPath.rCubicTo(0.3f, -0.14f, 0.57f, -0.3f, 0.8f, -0.5f);
        mPath.rCubicTo(0.23f, -0.2f, 0.42f, -0.41f, 0.57f, -0.64f);
        mPath.rCubicTo(0.15f, -0.23f, 0.27f, -0.46f, 0.34f, -0.71f);
        mPath.rCubicTo(0.08f, -0.24f, 0.11f, -0.49f, 0.11f, -0.73f);
        mPath.rCubicTo(0.0f, -0.55f, -0.09f, -1.04f, -0.28f, -1.46f);
        mPath.rCubicTo(-0.18f, -0.42f, -0.44f, -0.77f, -0.78f, -1.06f);
        mPath.rCubicTo(-0.33f, -0.28f, -0.73f, -0.5f, -1.2f, -0.64f);
        mPath.rCubicTo(-0.45f, -0.13f, -0.97f, -0.2f, -1.53f, -0.2f);
        mPath.rCubicTo(-0.55f, 0.0f, -1.06f, 0.08f, -1.52f, 0.24f);
        mPath.rCubicTo(-0.47f, 0.17f, -0.87f, 0.4f, -1.2f, 0.69f);
        mPath.rCubicTo(-0.33f, 0.29f, -0.6f, 0.63f, -0.78f, 1.03f);
        mPath.rCubicTo(-0.2f, 0.39f, -0.29f, 0.83f, -0.29f, 1.29f);
        mPath.rLineTo(1.98f, 0f);
        mPath.rCubicTo(0.0f, -0.26f, 0.05f, -0.49f, 0.14f, -0.69f);
        mPath.rCubicTo(0.09f, -0.2f, 0.22f, -0.38f, 0.38f, -0.52f);
        mPath.rCubicTo(0.17f, -0.14f, 0.36f, -0.25f, 0.58f, -0.33f);
        mPath.rCubicTo(0.22f, -0.08f, 0.46f, -0.12f, 0.73f, -0.12f);
        mPath.rCubicTo(0.61f, 0.0f, 1.06f, 0.16f, 1.36f, 0.47f);
        mPath.rCubicTo(0.3f, 0.31f, 0.44f, 0.75f, 0.44f, 1.32f);
        mPath.rCubicTo(0.0f, 0.27f, -0.04f, 0.52f, -0.12f, 0.74f);
        mPath.rCubicTo(-0.08f, 0.22f, -0.21f, 0.41f, -0.38f, 0.57f);
        mPath.rCubicTo(-0.17f, 0.16f, -0.38f, 0.28f, -0.63f, 0.37f);
        mPath.rCubicTo(-0.25f, 0.09f, -0.55f, 0.13f, -0.89f, 0.13f);
        mPath.lineTo(6.72f, 11.09f);
        mPath.rLineTo(0f, 1.57f);
        mPath.lineTo(7.9f, 12.66f);
        mPath.rCubicTo(0.34f, 0.0f, 0.64f, 0.04f, 0.91f, 0.11f);
        mPath.rCubicTo(0.27f, 0.08f, 0.5f, 0.19f, 0.69f, 0.35f);
        mPath.rCubicTo(0.19f, 0.16f, 0.34f, 0.36f, 0.44f, 0.61f);
        mPath.rCubicTo(0.1f, 0.24f, 0.16f, 0.54f, 0.16f, 0.87f);
        mPath.rCubicTo(0.0f, 0.62f, -0.18f, 1.09f, -0.53f, 1.42f);
        mPath.rCubicTo(-0.35f, 0.33f, -0.84f, 0.49f, -1.45f, 0.49f);
        mPath.rCubicTo(-0.29f, 0.0f, -0.56f, -0.04f, -0.8f, -0.13f);
        mPath.rCubicTo(-0.24f, -0.08f, -0.44f, -0.2f, -0.61f, -0.36f);
        mPath.rCubicTo(-0.17f, -0.16f, -0.3f, -0.34f, -0.39f, -0.56f);
        mPath.rCubicTo(-0.09f, -0.22f, -0.14f, -0.46f, -0.14f, -0.72f);
        mPath.lineTo(4.19f, 14.739998f);
        mPath.rCubicTo(0.0f, 0.55f, 0.11f, 1.03f, 0.32f, 1.45f);
        mPath.rCubicTo(0.21f, 0.42f, 0.5f, 0.77f, 0.86f, 1.05f);
        mPath.rCubicTo(0.36000013f, 0.27999878f, 0.77f, 0.49f, 1.24f, 0.63f);
        mPath.rCubicTo(0.47000027f, 0.13999939f, 0.96f, 0.21f, 1.48f, 0.21f);
        mPath.rCubicTo(0.57f, 0.0f, 1.09f, -0.08f, 1.58f, -0.23f);
        mPath.rCubicTo(0.49f, -0.15f, 0.91f, -0.38f, 1.26f, -0.68f);
        mPath.rCubicTo(0.36f, -0.3f, 0.64f, -0.66f, 0.84f, -1.1f);
        mPath.rCubicTo(0.2f, -0.43f, 0.3f, -0.93f, 0.3f, -1.48f);
        mPath.rCubicTo(0.0f, -0.29f, -0.04f, -0.58f, -0.11f, -0.86f);
        mPath.rCubicTo(-0.08f, -0.25f, -0.19f, -0.51f, -0.35f, -0.76f);
        mPath.close();
        mPath.moveTo(11.61f, 12.97f);
        mPath.rMoveTo(9.26f, 1.4f);
        mPath.rCubicTo(-0.14f, -0.28f, -0.35f, -0.53f, -0.63f, -0.74f);
        mPath.rCubicTo(-0.28f, -0.21f, -0.61f, -0.39f, -1.01f, -0.53f);
        mPath.rCubicTo(-0.39999962f, -0.13999939f, -0.85f, -0.27f, -1.35f, -0.38f);
        mPath.rCubicTo(-0.35f, -0.07f, -0.64f, -0.15f, -0.87f, -0.23f);
        mPath.rCubicTo(-0.23f, -0.08f, -0.41f, -0.16f, -0.55f, -0.25f);
        mPath.rCubicTo(-0.14f, -0.09f, -0.23f, -0.19f, -0.28f, -0.3f);
        mPath.rCubicTo(-0.05f, -0.11f, -0.08f, -0.24f, -0.08f, -0.39f);
        mPath.rCubicTo(0.0f, -0.15000057f, 0.03f, -0.28f, 0.09f, -0.41f);
        mPath.rCubicTo(0.06f, -0.13f, 0.15f, -0.25f, 0.27f, -0.34f);
        mPath.rCubicTo(0.12f, -0.1f, 0.27f, -0.18f, 0.45f, -0.24f);
        mPath.rCubicTo(0.1800003f, -0.059999466f, 0.4f, -0.09f, 0.64f, -0.09f);
        mPath.rCubicTo(0.25f, 0.0f, 0.47f, 0.04f, 0.66f, 0.11f);
        mPath.rCubicTo(0.19f, 0.07f, 0.35f, 0.17f, 0.48f, 0.29f);
        mPath.rCubicTo(0.13f, 0.12f, 0.22f, 0.26f, 0.29f, 0.42f);
        mPath.rCubicTo(0.06f, 0.16f, 0.1f, 0.32f, 0.1f, 0.49f);
        mPath.rLineTo(1.95f, 0f);
        mPath.rCubicTo(0.0f, -0.39f, -0.08f, -0.75f, -0.24f, -1.09f);
        mPath.rCubicTo(-0.16f, -0.34f, -0.39f, -0.63f, -0.69f, -0.88f);
        mPath.rCubicTo(-0.3f, -0.25f, -0.66f, -0.44f, -1.09f, -0.59f);
        mPath.rCubicTo(-0.43f, -0.15f, -0.92f, -0.22f, -1.46f, -0.22f);
        mPath.rCubicTo(-0.51f, 0.0f, -0.98f, 0.07f, -1.39f, 0.21f);
        mPath.rCubicTo(-0.41f, 0.14f, -0.77f, 0.33f, -1.06f, 0.57f);
        mPath.rCubicTo(-0.29f, 0.24f, -0.51f, 0.52f, -0.67f, 0.84f);
        mPath.rCubicTo(-0.16f, 0.32f, -0.23f, 0.65f, -0.23f, 1.01f);
        mPath.rCubicTo(0.0f, 0.3600006f, 0.08f, 0.68f, 0.23f, 0.96f);
        mPath.rCubicTo(0.15f, 0.28f, 0.37f, 0.52f, 0.64f, 0.73f);
        mPath.rCubicTo(0.27f, 0.21f, 0.6f, 0.38f, 0.98f, 0.53f);
        mPath.rCubicTo(0.38f, 0.14f, 0.81f, 0.26f, 1.27f, 0.36f);
        mPath.rCubicTo(0.39f, 0.08f, 0.71f, 0.17f, 0.95f, 0.26f);
        mPath.rCubicTo(0.24000168f, 0.09000015f, 0.43f, 0.19f, 0.57f, 0.29f);
        mPath.rCubicTo(0.13f, 0.1f, 0.22f, 0.22f, 0.27f, 0.34f);
        mPath.rCubicTo(0.05f, 0.12f, 0.07f, 0.25f, 0.07f, 0.39f);
        mPath.rCubicTo(0.0f, 0.32f, -0.13f, 0.57f, -0.4f, 0.77f);
        mPath.rCubicTo(-0.27f, 0.2f, -0.66f, 0.29f, -1.17f, 0.29f);
        mPath.rCubicTo(-0.22f, 0.0f, -0.43f, -0.02f, -0.64f, -0.08f);
        mPath.rCubicTo(-0.21f, -0.05f, -0.4f, -0.13f, -0.56f, -0.24f);
        mPath.rCubicTo(-0.17f, -0.11f, -0.3f, -0.26f, -0.41f, -0.44f);
        mPath.rCubicTo(-0.11f, -0.18f, -0.17f, -0.41f, -0.18f, -0.67f);
        mPath.rLineTo(-1.89f, 0f);
        mPath.rCubicTo(0.0f, 0.36f, 0.08f, 0.71f, 0.24f, 1.05f);
        mPath.rCubicTo(0.16f, 0.34f, 0.39f, 0.65f, 0.7f, 0.93f);
        mPath.rCubicTo(0.31f, 0.27f, 0.69f, 0.49f, 1.15f, 0.66f);
        mPath.rCubicTo(0.46f, 0.17f, 0.98f, 0.25f, 1.58f, 0.25f);
        mPath.rCubicTo(0.53f, 0.0f, 1.01f, -0.06f, 1.44f, -0.19f);
        mPath.rCubicTo(0.43f, -0.13f, 0.8f, -0.31f, 1.11f, -0.54f);
        mPath.rCubicTo(0.31f, -0.23f, 0.54f, -0.51f, 0.71f, -0.83f);
        mPath.rCubicTo(0.17f, -0.32f, 0.25f, -0.67f, 0.25f, -1.06f);
        mPath.rCubicTo(-0.02f, -0.4f, -0.09f, -0.74f, -0.24f, -1.02f);
        mPath.close();
        mPath.moveTo(20.869999f, 14.37f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}