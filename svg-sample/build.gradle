import com.github.megatronking.svg.plugin.SVGExtension
import com.github.megatronking.svg.plugin.task.SVGAssembleTask

apply plugin: 'com.android.application'
apply plugin: 'svg'

svg {
    // 配置vector目录，可以配置多个(如果直接使用svg格式图片，可以不配置此项)
    vectorDirs = ["src/main/res_vector/drawable"]
    // 配置生成空shape文件目录
    shapeDir = "src/main/res_shape/drawable"
    // 配置生成java文件目录
    javaDir = "src/main/java/com/github/megatronking/svg/sample/drawables"

    // 自动将vector和shape资源文件添加到SourceSet，此项默认是true，可以不设置
    autoSourceSet = true

    // 定义svg生成vector的配置，可以配置多个目录，方便图片分类
    svg2vector {
        svg_a {
            svgDir = "${projectDir}/svg_a"
            vectorDir = "src/main/res_svg/drawable"
            // 配置生成的vector尺寸，不设置将按照图片尺寸大小
            // 注意此处宽高比要与图片宽高比一致，否则图片会变形
            height = 48
            width = 48
        }
        svg_b {
            svgDir = "${projectDir}/svg_b"
            vectorDir = "src/main/res_svg/drawable"
            height = 48
            width = 48
        }
    }

}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "com.github.megatronking.svg.sample"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.0'
    testCompile 'junit:junit:4.12'
    //compile 'com.github.megatronking:svg-support:1.3.1'
    compile project(':svg-support')
}

class ApkDistExtension {
    public def vectorDirs = [];
    public def shapeDir;
    public def javaDir;

    public def packageName;
    public def appColors;

    public def cleanMode;

    public def debugMode;

    public def autoSourceSet = true;

    public def generateLoader = true;
}

class SVG2VectorExtension  {

    public def name;

    public def svgDir;
    public def vectorDir;

    public def width = 0;
    public def height = 0;

    public SVG2VectorExtension(def name) {
        this.name = name;
    }

}

class ApkDistPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {

        def svgExtension = project.extensions.create('apkdistconf', ApkDistExtension);

        def assemble = project.tasks.create("svg2Vector1", SVG2VectorTask)

        project.task('apkdist') << {
            println 'hello, world!'

            def now= new Date()
            println now
            def longType= now.time
            println longType

        }
    }
}

apply plugin: ApkDistPlugin

apkdistconf {
    // 配置vector目录，可以配置多个(如果直接使用svg格式图片，可以不配置此项)
    vectorDirs = ["src/main/res_vector/drawable"]
    // 配置生成空shape文件目录
    shapeDir = "src/main/res_shape/drawable"
    // 配置生成java文件目录
    javaDir = "src/main/java/com/github/megatronking/svg/sample/drawables"

    // 自动将vector和shape资源文件添加到SourceSet，此项默认是true，可以不设置
    autoSourceSet = true

    // 定义svg生成vector的配置，可以配置多个目录，方便图片分类
    svg2vector {
        svg_a {
            svgDir = "${projectDir}/svg_a"
            vectorDir = "src/main/res_svg/drawable"
            // 配置生成的vector尺寸，不设置将按照图片尺寸大小
            // 注意此处宽高比要与图片宽高比一致，否则图片会变形
            height = 48
            width = 48
        }
        svg_b {
            svgDir = "${projectDir}/svg_b"
            vectorDir = "src/main/res_svg/drawable"
            height = 48
            width = 48
        }
    }
}

//命令  gradle -p svg-sample/ apkdist


class SVG2VectorTask extends DefaultTask {

    def errorSvgs = []

    def extensionName;

    public void setExtensionName(def extensionName) {
        this.extensionName = extensionName;
    }
    def SVGExtension configuration
    def com.github.megatronking.svg.plugin.SVG2VectorExtension[] svg2vectorConfigurations;

    @TaskAction
    public void run() {
        println '111'
        configuration = project.svg


        if (configuration.javaDir) {
            configuration.javaDir = resolveProjectDir(configuration.javaDir)
            println configuration.javaDir
        }
        if (configuration.shapeDir) {
            configuration.shapeDir = resolveProjectDir(configuration.shapeDir)
        }
        if (configuration.vectorDirs) {
            def vectorDirs = []
            configuration.vectorDirs.each { vectorDir->
                vectorDir = resolveProjectDir(vectorDir);
                vectorDirs.add(vectorDir)
            }
            configuration.vectorDirs = vectorDirs
        }

        svg2vectorConfigurations = project.extensions.svg2vector
        if (svg2vectorConfigurations) {
            svg2vectorConfigurations.each { svg2vectorConfiguration->
                if(!configuration.vectorDirs.contains(svg2vectorConfiguration.vectorDir)) {
                    configuration.vectorDirs.add(svg2vectorConfiguration.vectorDir)
                }
            }
        }

        errorSvgs.clear()
        svg2vectorConfigurations.each { svg2vectorConfiguration->
            if (extensionName.equals(svg2vectorConfiguration.name)) {
                doSvg2Vector(svg2vectorConfiguration.svgDir, resolveProjectDir(svg2vectorConfiguration.vectorDir)
                        , svg2vectorConfiguration.width, svg2vectorConfiguration.height)
            }
        }
        errorSvgs.each { errorSvg ->
            logger.error(errorSvg + " error！")
        }
    }

    public def file(def filePath) {
        return new File(filePath)
    }

    public def file(def dir, def fileName) {
        return new File(dir, fileName)
    }

    public def resolveProjectDir(def dir) {
        def dirFile = file(dir)
        if (dir != null && !dirFile.exists() && !dir.startsWith(project.projectDir.absolutePath)) {
            dir = project.projectDir.absolutePath + File.separator + dir
        }
        return dir
    }

}